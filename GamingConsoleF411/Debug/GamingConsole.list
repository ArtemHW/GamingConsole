
GamingConsole.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb8  08002cb8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc0  08002cc0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000005c  08002d24  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08002d24  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfdf  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fc  00000000  00000000  0002e0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  000301b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000941  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a461  00000000  00000000  00031711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eecc  00000000  00000000  0004bb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000947df  00000000  00000000  0005aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003928  00000000  00000000  000ef220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f2b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002bc0 	.word	0x08002bc0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08002bc0 	.word	0x08002bc0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_GPIO_Init+0x30>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <MX_GPIO_Init+0x30>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_GPIO_Init+0x30>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 ff38 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f806 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f7ff ffde 	bl	80004d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  mainCpp_call();
 8000518:	f000 f8ac 	bl	8000674 <mainCpp_call>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x14>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fa72 	bl	8002a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SystemClock_Config+0xc8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <SystemClock_Config+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xcc>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f83f 	bl	8001628 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f830 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fb51 	bl	8001c78 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005dc:	f000 f81a 	bl	8000614 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d101      	bne.n	8000606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000602:	f000 fedf 	bl	80013c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40014800 	.word	0x40014800

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>

0800061e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d201      	bcs.n	8000666 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	e000      	b.n	8000668 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000666:	687b      	ldr	r3, [r7, #4]
    }
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <mainCpp_call>:
};

extern "C"
{
	void mainCpp_call()
	{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
		mainCpp();
 8000678:	f000 f82a 	bl	80006d0 <_Z7mainCppv>
	}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f852 	bl	8000734 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZNSt6vectorIiSaIiEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffeb 	bl	8000680 <_ZNSt12_Vector_baseIiSaIiEEC1Ev>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_ZN4testC1Ev>:
class test
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3308      	adds	r3, #8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffea 	bl	800069a <_ZNSt6vectorIiSaIiEEC1Ev>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_Z7mainCppv>:
}

void mainCpp()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	test temp;
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffeb 	bl	80006b4 <_ZN4testC1Ev>
	temp.c.push_back(125);
 80006de:	237d      	movs	r3, #125	; 0x7d
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	f107 0214 	add.w	r2, r7, #20
 80006e6:	463b      	mov	r3, r7
 80006e8:	3308      	adds	r3, #8
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f831 	bl	8000754 <_ZNSt6vectorIiSaIiEE9push_backEOi>

	for( ; ; ){
		__asm__ volatile("NOP");
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <_Z7mainCppv+0x22>

080006f6 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d201      	bcs.n	8000710 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	e000      	b.n	8000712 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000710:	687b      	ldr	r3, [r7, #4]
    }
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f81a 	bl	8000776 <_ZNSaIiEC1Ev>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f822 	bl	800078e <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>
	{ }
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <_ZNSt6vectorIiSaIiEE9push_backEOi>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800075e:	6838      	ldr	r0, [r7, #0]
 8000760:	f000 f855 	bl	800080e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8000764:	4603      	mov	r3, r0
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f85b 	bl	8000824 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_>
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZNSaIiEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f87e 	bl	8000880 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_ZNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
	{ }
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	if (__p)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f861 	bl	8000896 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>
      }
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80007fe:	68b9      	ldr	r1, [r7, #8]
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 f857 	bl	80008b4 <_ZSt8_DestroyIPiEvT_S1_>
    }
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	429a      	cmp	r2, r3
 8000838:	d011      	beq.n	800085e <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800083a:	687c      	ldr	r4, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685d      	ldr	r5, [r3, #4]
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	f7ff ff6c 	bl	800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4629      	mov	r1, r5
 800084c:	4620      	mov	r0, r4
 800084e:	f000 f83e 	bl	80008ce <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	1d1a      	adds	r2, r3, #4
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800085c:	e00c      	b.n	8000878 <_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f848 	bl	80008f4 <_ZNSt6vectorIiSaIiEE3endEv>
 8000864:	4604      	mov	r4, r0
 8000866:	6838      	ldr	r0, [r7, #0]
 8000868:	f7ff ff59 	bl	800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4621      	mov	r1, r4
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 f866 	bl	8000944 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>
      }
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}

08000880 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_ZNSt16allocator_traitsISaIiEE10deallocateERS0_Pij>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f908 	bl	8000abc <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_ZSt8_DestroyIPiEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f90b 	bl	8000adc <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>
    }
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff1f 	bl	800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f903 	bl	8000af2 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>
	}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZNSt6vectorIiSaIiEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1d1a      	adds	r2, r3, #4
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f909 	bl	8000b1e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>:
      _S_use_relocate()
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f805 	bl	800092c <_ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000922:	4603      	mov	r3, r0
      }
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZNSt6vectorIiSaIiEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000934:	2301      	movs	r3, #1
      }
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000950:	4a59      	ldr	r2, [pc, #356]	; (8000ab8 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x174>)
 8000952:	2101      	movs	r1, #1
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 f8f2 	bl	8000b3e <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>
 800095a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 f92f 	bl	8000bcc <_ZNSt6vectorIiSaIiEE5beginEv>
 800096e:	4603      	mov	r3, r0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	f107 0214 	add.w	r2, r7, #20
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f935 	bl	8000bec <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8000982:	4603      	mov	r3, r0
 8000984:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f943 	bl	8000c16 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>
 8000990:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000996:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	18d5      	adds	r5, r2, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff febc 	bl	800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4629      	mov	r1, r5
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff ff8e 	bl	80008ce <_ZNSt16allocator_traitsISaIiEE9constructIiJiEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80009b6:	f7ff ffae 	bl	8000916 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d027      	beq.n	8000a10 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f94e 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80009ca:	4603      	mov	r3, r0
 80009cc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff03 	bl	80007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80009d6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4621      	mov	r1, r4
 80009dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009de:	f000 f92e 	bl	8000c3e <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>
 80009e2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	3304      	adds	r3, #4
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f939 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 80009f4:	4603      	mov	r3, r0
 80009f6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff feee 	bl	80007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000a00:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a04:	6a39      	ldr	r1, [r7, #32]
 8000a06:	4620      	mov	r0, r4
 8000a08:	f000 f919 	bl	8000c3e <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>
 8000a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000a0e:	e026      	b.n	8000a5e <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f926 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fedb 	bl	80007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000a26:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a2e:	f000 f925 	bl	8000c7c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8000a32:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a36:	3304      	adds	r3, #4
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f911 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8000a44:	4603      	mov	r3, r0
 8000a46:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fec6 	bl	80007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000a50:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a54:	6a39      	ldr	r1, [r7, #32]
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 f910 	bl	8000c7c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8000a5c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000a5e:	f7ff ff5a 	bl	8000916 <_ZNSt6vectorIiSaIiEE15_S_use_relocateEv>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d009      	beq.n	8000a82 <_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff feb3 	bl	80007dc <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	6a39      	ldr	r1, [r7, #32]
 8000a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a7e:	f7ff feb8 	bl	80007f2 <_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000a82:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8000a8e:	461a      	mov	r2, r3
 8000a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a92:	f7ff fe90 	bl	80007b6 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPij>
      this->_M_impl._M_start = __new_start;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	609a      	str	r2, [r3, #8]
    }
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08002bd8 	.word	0x08002bd8

08000abc <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4619      	mov	r1, r3
 8000ace:	68b8      	ldr	r0, [r7, #8]
 8000ad0:	f001 fe9e 	bl	8002810 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000af2:	b590      	push	{r4, r7, lr}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe0d 	bl	800071e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8000b04:	4603      	mov	r3, r0
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2004      	movs	r0, #4
 8000b0e:	f7ff fd91 	bl	8000634 <_ZnwjPv>
 8000b12:	4603      	mov	r3, r0
 8000b14:	601c      	str	r4, [r3, #0]
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd90      	pop	{r4, r7, pc}

08000b1e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000b3e:	b590      	push	{r4, r7, lr}
 8000b40:	b087      	sub	sp, #28
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f000 f8af 	bl	8000cae <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8000b50:	4604      	mov	r4, r0
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f8bc 	bl	8000cd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	1ae2      	subs	r2, r4, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	bf34      	ite	cc
 8000b62:	2301      	movcc	r3, #1
 8000b64:	2300      	movcs	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f001 fe68 	bl	8002842 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 f8ac 	bl	8000cd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f000 f8a8 	bl	8000cd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	f107 0208 	add.w	r2, r7, #8
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fdb1 	bl	80006f6 <_ZSt3maxIjERKT_S2_S2_>
 8000b94:	4603      	mov	r3, r0
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4423      	add	r3, r4
 8000b9a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f000 f897 	bl	8000cd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d306      	bcc.n	8000bb8 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x7a>
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f000 f87f 	bl	8000cae <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d904      	bls.n	8000bc2 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x84>
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f878 	bl	8000cae <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	e000      	b.n	8000bc4 <_ZNKSt6vectorIiSaIiEE12_M_check_lenEjPKc+0x86>
 8000bc2:	697b      	ldr	r3, [r7, #20]
      }
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd90      	pop	{r4, r7, pc}

08000bcc <_ZNSt6vectorIiSaIiEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff9e 	bl	8000b1e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f835 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f000 f830 	bl	8000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
 8000c06:	4603      	mov	r3, r0
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	1ae3      	subs	r3, r4, r3
 8000c0c:	109b      	asrs	r3, r3, #2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}

08000c16 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x1e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6839      	ldr	r1, [r7, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f860 	bl	8000cf0 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>
 8000c30:	4603      	mov	r3, r0
 8000c32:	e000      	b.n	8000c36 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj+0x20>
 8000c34:	2300      	movs	r3, #0
      }
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b087      	sub	sp, #28
 8000c42:	af02      	add	r7, sp, #8
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000c4c:	f88d 4000 	strb.w	r4, [sp]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f000 f859 	bl	8000d0e <_ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE>
 8000c5c:	4603      	mov	r3, r0
      }
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd90      	pop	{r4, r7, pc}

08000c66 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 f851 	bl	8000d32 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8000c90:	4604      	mov	r4, r0
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f000 f84d 	bl	8000d32 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>
 8000c98:	4601      	mov	r1, r0
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f000 f856 	bl	8000d50 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>
 8000ca4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}

08000cae <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f874 	bl	8000da6 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f856 	bl	8000d72 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	109b      	asrs	r3, r3, #2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNSt16allocator_traitsISaIiEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f868 	bl	8000dd4 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZNSt6vectorIiSaIiEE14_S_do_relocateEPiS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f000 f87f 	bl	8000e26 <_ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_>
 8000d28:	4603      	mov	r3, r0
      }
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_ZSt32__make_move_if_noexcept_iteratorIiSt13move_iteratorIPiEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f88d 	bl	8000e60 <_ZNSt13move_iteratorIPiEC1ES0_>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPiES1_iET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 f88e 	bl	8000e84 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_ZNSt6vectorIiSaIiEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000d7a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000d7e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f891 	bl	8000ea8 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>
 8000d86:	4603      	mov	r3, r0
 8000d88:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000d8a:	f107 0208 	add.w	r2, r7, #8
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc59 	bl	800064c <_ZSt3minIjERKT_S2_S2_>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	681b      	ldr	r3, [r3, #0]
      }
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000dc4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff ffeb 	bl	8000dbc <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	bf8c      	ite	hi
 8000dee:	2301      	movhi	r3, #1
 8000df0:	2300      	movls	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d301      	bcc.n	8000e0e <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8000e0a:	f001 fd17 	bl	800283c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8000e0e:	f001 fd12 	bl	8002836 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fcfc 	bl	8002814 <_Znwj>
 8000e1c:	4603      	mov	r3, r0
      }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZSt12__relocate_aIPiS0_SaIiEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8000e26:	b5b0      	push	{r4, r5, r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f000 f843 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f000 f83f 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000e42:	4605      	mov	r5, r0
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f83b 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4620      	mov	r0, r4
 8000e52:	f000 f840 	bl	8000ed6 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8000e56:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}

08000e60 <_ZNSt13move_iteratorIPiEC1ES0_>:
      move_iterator(iterator_type __i)
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f850 	bl	8000f12 <_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_>
 8000e72:	4603      	mov	r3, r0
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZSt18uninitialized_copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000e90:	2301      	movs	r3, #1
 8000e92:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f000 f845 	bl	8000f28 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>
 8000e9e:	4603      	mov	r3, r0
    }
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_ZNSt16allocator_traitsISaIiEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f849 	bl	8000f48 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 8000eb6:	4603      	mov	r3, r0
      }
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZSt12__niter_baseIPiET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	109b      	asrs	r3, r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd06      	ble.n	8000f02 <_ZSt14__relocate_a_1IiiENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68f9      	ldr	r1, [r7, #12]
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 fd71 	bl	80029e4 <memmove>
      return __result + __count;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
    }
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZSt4moveIRPiEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPiES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 f811 	bl	8000f60 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff33 	bl	8000dbc <_ZNK9__gnu_cxx13new_allocatorIiE11_M_max_sizeEv>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZSt4copyISt13move_iteratorIPiES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f80f 	bl	8000f90 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000f72:	4604      	mov	r4, r0
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f000 f80b 	bl	8000f90 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4620      	mov	r0, r4
 8000f82:	f000 f816 	bl	8000fb2 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>
 8000f86:	4603      	mov	r3, r0
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}

08000f90 <_ZSt12__miter_baseIPiEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f82c 	bl	8000ff8 <_ZNKSt13move_iteratorIPiE4baseEv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f834 	bl	8001010 <_ZSt12__miter_baseIPiET_S1_>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZSt13__copy_move_aILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000fb2:	b5b0      	push	{r4, r5, r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff ff7e 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff ff7a 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000fcc:	4605      	mov	r5, r0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff75 	bl	8000ec0 <_ZSt12__niter_baseIPiET_S1_>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f000 f822 	bl	8001026 <_ZSt14__copy_move_a1ILb1EPiS0_ET1_T0_S2_S1_>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f82c 	bl	8001046 <_ZSt12__niter_wrapIPiET_RKS1_S1_>
 8000fee:	4603      	mov	r3, r0
    }
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}

08000ff8 <_ZNKSt13move_iteratorIPiE4baseEv>:
      base() const
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZSt12__miter_baseIPiET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZSt14__copy_move_a1ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f811 	bl	800105e <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>
 800103c:	4603      	mov	r3, r0
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_ZSt12__niter_wrapIPiET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_ZSt14__copy_move_a2ILb1EPiS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f805 	bl	800107e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
 8001074:	4603      	mov	r3, r0
    }
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	109b      	asrs	r3, r3, #2
 8001092:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	461a      	mov	r2, r3
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f001 fc9e 	bl	80029e4 <memmove>
	  return __result + _Num;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
	}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_InitTick+0xd0>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <HAL_InitTick+0xd0>)
 8001122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001126:	6453      	str	r3, [r2, #68]	; 0x44
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_InitTick+0xd0>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001134:	f107 020c 	add.w	r2, r7, #12
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f80e 	bl	8002160 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001144:	f000 fff8 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8001148:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <HAL_InitTick+0xd4>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	0c9b      	lsrs	r3, r3, #18
 8001154:	3b01      	subs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_InitTick+0xd8>)
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_InitTick+0xdc>)
 800115c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_InitTick+0xd8>)
 8001160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001164:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_InitTick+0xd8>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_InitTick+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_InitTick+0xd8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_InitTick+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <HAL_InitTick+0xd8>)
 8001180:	f001 f820 	bl	80021c4 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800118a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800118e:	2b00      	cmp	r3, #0
 8001190:	d11b      	bne.n	80011ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <HAL_InitTick+0xd8>)
 8001194:	f001 f8e6 	bl	8002364 <HAL_TIM_Base_Start_IT>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800119e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d111      	bne.n	80011ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80011a6:	201a      	movs	r0, #26
 80011a8:	f000 fa26 	bl	80015f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d808      	bhi.n	80011c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80011b2:	2200      	movs	r2, #0
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	201a      	movs	r0, #26
 80011b8:	f000 f9f2 	bl	80015a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0xe0>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e002      	b.n	80011ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	20000078 	.word	0x20000078
 80011e4:	40014800 	.word	0x40014800
 80011e8:	20000004 	.word	0x20000004

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800124a:	f001 f91d 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000078 	.word	0x20000078

08001258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return 1;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_kill>:

int _kill(int pid, int sig)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001272:	f001 fc2d 	bl	8002ad0 <__errno>
 8001276:	4603      	mov	r3, r0
 8001278:	2216      	movs	r2, #22
 800127a:	601a      	str	r2, [r3, #0]
  return -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_exit>:

void _exit (int status)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ffe7 	bl	8001268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800129a:	e7fe      	b.n	800129a <_exit+0x12>

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f001 fc00 	bl	8002ad0 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20020000 	.word	0x20020000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200000c0 	.word	0x200000c0
 8001304:	20000218 	.word	0x20000218

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001356:	f7ff ffd7 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f001 fbbf 	bl	8002adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff f8d3 	bl	8000508 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001370:	08002cc8 	.word	0x08002cc8
  ldr r2, =_sbss
 8001374:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001378:	20000214 	.word	0x20000214

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f8d9 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f7ff feaa 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fe80 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200000c4 	.word	0x200000c4

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200000c4 	.word	0x200000c4

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b07      	cmp	r3, #7
 800156c:	d00f      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b06      	cmp	r3, #6
 8001572:	d00c      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d009      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d006      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d003      	beq.n	800158e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001586:	2190      	movs	r1, #144	; 0x90
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800158a:	f7ff f848 	bl	800061e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff38 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08002bf4 	.word	0x08002bf4

080015a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d903      	bls.n	80015c0 <HAL_NVIC_SetPriority+0x20>
 80015b8:	21a8      	movs	r1, #168	; 0xa8
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <HAL_NVIC_SetPriority+0x54>)
 80015bc:	f7ff f82f 	bl	800061e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d903      	bls.n	80015ce <HAL_NVIC_SetPriority+0x2e>
 80015c6:	21a9      	movs	r1, #169	; 0xa9
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <HAL_NVIC_SetPriority+0x54>)
 80015ca:	f7ff f828 	bl	800061e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ce:	f7ff ff3d 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f7ff ff8d 	bl	80014f8 <NVIC_EncodePriority>
 80015de:	4602      	mov	r2, r0
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff5c 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08002bf4 	.word	0x08002bf4

080015f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da03      	bge.n	8001612 <HAL_NVIC_EnableIRQ+0x1a>
 800160a:	21bc      	movs	r1, #188	; 0xbc
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_NVIC_EnableIRQ+0x2c>)
 800160e:	f7ff f806 	bl	800061e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff26 	bl	8001468 <__NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	08002bf4 	.word	0x08002bf4

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e314      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	d903      	bls.n	800164a <HAL_RCC_OscConfig+0x22>
 8001642:	21e6      	movs	r1, #230	; 0xe6
 8001644:	4897      	ldr	r0, [pc, #604]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 8001646:	f7fe ffea 	bl	800061e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8088 	beq.w	8001768 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00d      	beq.n	800167c <HAL_RCC_OscConfig+0x54>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d008      	beq.n	800167c <HAL_RCC_OscConfig+0x54>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001672:	d003      	beq.n	800167c <HAL_RCC_OscConfig+0x54>
 8001674:	21eb      	movs	r1, #235	; 0xeb
 8001676:	488b      	ldr	r0, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 8001678:	f7fe ffd1 	bl	800061e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167c:	4b8a      	ldr	r3, [pc, #552]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001688:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001690:	2b08      	cmp	r3, #8
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001694:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d05b      	beq.n	8001766 <HAL_RCC_OscConfig+0x13e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d157      	bne.n	8001766 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e2d4      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0xaa>
 80016c4:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a77      	ldr	r2, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e01d      	b.n	800170e <HAL_RCC_OscConfig+0xe6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0xce>
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a71      	ldr	r2, [pc, #452]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0xe6>
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6b      	ldr	r2, [pc, #428]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a68      	ldr	r2, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fe69 	bl	80013ec <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff fe65 	bl	80013ec <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e299      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0xf6>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fe55 	bl	80013ec <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001746:	f7ff fe51 	bl	80013ec <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e285      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x11e>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d079      	beq.n	8001868 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_OscConfig+0x166>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d004      	beq.n	800178e <HAL_RCC_OscConfig+0x166>
 8001784:	f240 111d 	movw	r1, #285	; 0x11d
 8001788:	4846      	ldr	r0, [pc, #280]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 800178a:	f7fe ff48 	bl	800061e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b1f      	cmp	r3, #31
 8001794:	d904      	bls.n	80017a0 <HAL_RCC_OscConfig+0x178>
 8001796:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800179a:	4842      	ldr	r0, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 800179c:	f7fe ff3f 	bl	800061e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ac:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d11c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b8:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d116      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x1b4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e243      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	492f      	ldr	r1, [pc, #188]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f0:	e03a      	b.n	8001868 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_RCC_OscConfig+0x284>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fdf4 	bl	80013ec <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fdf0 	bl	80013ec <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e224      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	491c      	ldr	r1, [pc, #112]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x284>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fdd3 	bl	80013ec <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fdcf 	bl	80013ec <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e203      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d045      	beq.n	8001900 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_OscConfig+0x266>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d004      	beq.n	800188e <HAL_RCC_OscConfig+0x266>
 8001884:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x27c>)
 800188a:	f7fe fec8 	bl	800061e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01e      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fda6 	bl	80013ec <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e010      	b.n	80018c6 <HAL_RCC_OscConfig+0x29e>
 80018a4:	08002c30 	.word	0x08002c30
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470000 	.word	0x42470000
 80018b0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fd9a 	bl	80013ec <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1ce      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x28c>
 80018d2:	e015      	b.n	8001900 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d4:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_RCC_OscConfig+0x41c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fd87 	bl	80013ec <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fd83 	bl	80013ec <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1b7      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80b0 	beq.w	8001a6e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d008      	beq.n	8001934 <HAL_RCC_OscConfig+0x30c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d004      	beq.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800192a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800192e:	4846      	ldr	r0, [pc, #280]	; (8001a48 <HAL_RCC_OscConfig+0x420>)
 8001930:	f7fe fe75 	bl	800061e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCC_OscConfig+0x424>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196c:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x424>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x424>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff fd38 	bl	80013ec <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff fd34 	bl	80013ec <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e168      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_RCC_OscConfig+0x424>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x38c>
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x3c6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3ae>
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x3c6>
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fcf9 	bl	80013ec <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fcf5 	bl	80013ec <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e127      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x418>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x3d6>
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fce3 	bl	80013ec <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e012      	b.n	8001a50 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fcdf 	bl	80013ec <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d909      	bls.n	8001a50 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e111      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470e80 	.word	0x42470e80
 8001a48:	08002c30 	.word	0x08002c30
 8001a4c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b86      	ldr	r3, [pc, #536]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e6      	bne.n	8001a2a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x468>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d008      	beq.n	8001a90 <HAL_RCC_OscConfig+0x468>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d004      	beq.n	8001a90 <HAL_RCC_OscConfig+0x468>
 8001a86:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001a8a:	4879      	ldr	r0, [pc, #484]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001a8c:	f7fe fdc7 	bl	800061e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80e4 	beq.w	8001c62 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9a:	4b74      	ldr	r3, [pc, #464]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	f000 80a5 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 8089 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_OscConfig+0x4a6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d004      	beq.n	8001ace <HAL_RCC_OscConfig+0x4a6>
 8001ac4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001ac8:	4869      	ldr	r0, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001aca:	f7fe fda8 	bl	800061e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad4:	d904      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4b8>
 8001ad6:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001ada:	4865      	ldr	r0, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001adc:	f7fe fd9f 	bl	800061e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2b31      	cmp	r3, #49	; 0x31
 8001ae6:	d904      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4ca>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001af0:	d904      	bls.n	8001afc <HAL_RCC_OscConfig+0x4d4>
 8001af2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001af6:	485e      	ldr	r0, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001af8:	f7fe fd91 	bl	800061e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4fe>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4fe>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4fe>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d004      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4fe>
 8001b1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001b20:	4853      	ldr	r0, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001b22:	f7fe fd7c 	bl	800061e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d903      	bls.n	8001b36 <HAL_RCC_OscConfig+0x50e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d904      	bls.n	8001b40 <HAL_RCC_OscConfig+0x518>
 8001b36:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001b3a:	484d      	ldr	r0, [pc, #308]	; (8001c70 <HAL_RCC_OscConfig+0x648>)
 8001b3c:	f7fe fd6f 	bl	800061e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x64c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc51 	bl	80013ec <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fc4d 	bl	80013ec <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e081      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69da      	ldr	r2, [r3, #28]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	061b      	lsls	r3, r3, #24
 8001b90:	4936      	ldr	r1, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_RCC_OscConfig+0x64c>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc26 	bl	80013ec <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff fc22 	bl	80013ec <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e056      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x57c>
 8001bc2:	e04e      	b.n	8001c62 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x64c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fc0f 	bl	80013ec <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fc0b 	bl	80013ec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03f      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5aa>
 8001bf0:	e037      	b.n	8001c62 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e032      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x644>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d028      	beq.n	8001c5e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d121      	bne.n	8001c5e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d11a      	bne.n	8001c5e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d111      	bne.n	8001c5e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08002c30 	.word	0x08002c30
 8001c74:	42470060 	.word	0x42470060

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e174      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x24>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d904      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x2e>
 8001c9c:	f240 215a 	movw	r1, #602	; 0x25a
 8001ca0:	487b      	ldr	r0, [pc, #492]	; (8001e90 <HAL_RCC_ClockConfig+0x218>)
 8001ca2:	f7fe fcbc 	bl	800061e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d019      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d010      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	d007      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b07      	cmp	r3, #7
 8001cd4:	d004      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x68>
 8001cd6:	f240 215b 	movw	r1, #603	; 0x25b
 8001cda:	486d      	ldr	r0, [pc, #436]	; (8001e90 <HAL_RCC_ClockConfig+0x218>)
 8001cdc:	f7fe fc9f 	bl	800061e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d90c      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e136      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d049      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a5c      	ldr	r2, [pc, #368]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a56      	ldr	r2, [pc, #344]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d024      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b90      	cmp	r3, #144	; 0x90
 8001d5a:	d01c      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2ba0      	cmp	r3, #160	; 0xa0
 8001d62:	d018      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2bb0      	cmp	r3, #176	; 0xb0
 8001d6a:	d014      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2bc0      	cmp	r3, #192	; 0xc0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2bd0      	cmp	r3, #208	; 0xd0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2be0      	cmp	r3, #224	; 0xe0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2bf0      	cmp	r3, #240	; 0xf0
 8001d8a:	d004      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x11e>
 8001d8c:	f240 217e 	movw	r1, #638	; 0x27e
 8001d90:	483f      	ldr	r0, [pc, #252]	; (8001e90 <HAL_RCC_ClockConfig+0x218>)
 8001d92:	f7fe fc44 	bl	800061e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	493d      	ldr	r1, [pc, #244]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d059      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d004      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
 8001dd4:	f240 2185 	movw	r1, #645	; 0x285
 8001dd8:	482d      	ldr	r0, [pc, #180]	; (8001e90 <HAL_RCC_ClockConfig+0x218>)
 8001dda:	f7fe fc20 	bl	800061e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d119      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0bf      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0af      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0a7      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4919      	ldr	r1, [pc, #100]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff fad8 	bl	80013ec <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7ff fad4 	bl	80013ec <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e08f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_ClockConfig+0x220>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d212      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_ClockConfig+0x21c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d007      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e072      	b.n	8001f76 <HAL_RCC_ClockConfig+0x2fe>
 8001e90:	08002c30 	.word	0x08002c30
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d025      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d018      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x26a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb8:	d013      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x26a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x26a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x26a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001ed6:	d004      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x26a>
 8001ed8:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <HAL_RCC_ClockConfig+0x308>)
 8001ede:	f7fe fb9e 	bl	800061e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_RCC_ClockConfig+0x30c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4925      	ldr	r1, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x30c>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d026      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d018      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2c2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f10:	d013      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2c2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001f1a:	d00e      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2c2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2c2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001f2e:	d004      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x2c2>
 8001f30:	f240 21ca 	movw	r1, #714	; 0x2ca
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <HAL_RCC_ClockConfig+0x308>)
 8001f36:	f7fe fb72 	bl	800061e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x30c>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x30c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_ClockConfig+0x30c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x310>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_RCC_ClockConfig+0x314>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x318>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8ca 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	08002c30 	.word	0x08002c30
 8001f84:	40023800 	.word	0x40023800
 8001f88:	08002ca0 	.word	0x08002ca0
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f98:	b090      	sub	sp, #64	; 0x40
 8001f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	f200 80a1 	bhi.w	8002100 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x3a>
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fcc:	e09b      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fce:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd2:	e098      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd4:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fde:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d028      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_GetSysClockFreq+0x188>)
 8002000:	fb03 f201 	mul.w	r2, r3, r1
 8002004:	2300      	movs	r3, #0
 8002006:	fb00 f303 	mul.w	r3, r0, r3
 800200a:	4413      	add	r3, r2
 800200c:	4a43      	ldr	r2, [pc, #268]	; (800211c <HAL_RCC_GetSysClockFreq+0x188>)
 800200e:	fba0 1202 	umull	r1, r2, r0, r2
 8002012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002014:	460a      	mov	r2, r1
 8002016:	62ba      	str	r2, [r7, #40]	; 0x28
 8002018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201a:	4413      	add	r3, r2
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	2200      	movs	r2, #0
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	61fa      	str	r2, [r7, #28]
 8002026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800202e:	f7fe f8d3 	bl	80001d8 <__aeabi_uldivmod>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4613      	mov	r3, r2
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203a:	e053      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	2200      	movs	r2, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	617a      	str	r2, [r7, #20]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800204e:	f04f 0b00 	mov.w	fp, #0
 8002052:	4652      	mov	r2, sl
 8002054:	465b      	mov	r3, fp
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	0159      	lsls	r1, r3, #5
 8002060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002064:	0150      	lsls	r0, r2, #5
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	ebb2 080a 	subs.w	r8, r2, sl
 800206e:	eb63 090b 	sbc.w	r9, r3, fp
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800207e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002082:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002086:	ebb2 0408 	subs.w	r4, r2, r8
 800208a:	eb63 0509 	sbc.w	r5, r3, r9
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	00eb      	lsls	r3, r5, #3
 8002098:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800209c:	00e2      	lsls	r2, r4, #3
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	eb14 030a 	adds.w	r3, r4, sl
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	eb45 030b 	adc.w	r3, r5, fp
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ba:	4629      	mov	r1, r5
 80020bc:	028b      	lsls	r3, r1, #10
 80020be:	4621      	mov	r1, r4
 80020c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c4:	4621      	mov	r1, r4
 80020c6:	028a      	lsls	r2, r1, #10
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ce:	2200      	movs	r2, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020d8:	f7fe f87e 	bl	80001d8 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0x184>)
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002108:	4618      	mov	r0, r3
 800210a:	3740      	adds	r7, #64	; 0x40
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	00f42400 	.word	0x00f42400
 800211c:	017d7840 	.word	0x017d7840

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0b5b      	lsrs	r3, r3, #13
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4903      	ldr	r1, [pc, #12]	; (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	08002cb0 	.word	0x08002cb0

08002160 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	220f      	movs	r2, #15
 800216e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0203 	and.w	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_RCC_GetClockConfig+0x5c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCC_GetClockConfig+0x5c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_GetClockConfig+0x5c>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_RCC_GetClockConfig+0x60>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0207 	and.w	r2, r3, #7
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0a7      	b.n	8002326 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_TIM_Base_Init+0x16c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d027      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d022      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_TIM_Base_Init+0x170>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01d      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	; (8002338 <HAL_TIM_Base_Init+0x174>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d018      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_TIM_Base_Init+0x178>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_TIM_Base_Init+0x17c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_TIM_Base_Init+0x180>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_TIM_Base_Init+0x184>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_TIM_Base_Init+0x6c>
 8002226:	f240 1113 	movw	r1, #275	; 0x113
 800222a:	4848      	ldr	r0, [pc, #288]	; (800234c <HAL_TIM_Base_Init+0x188>)
 800222c:	f7fe f9f7 	bl	800061e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d014      	beq.n	8002262 <HAL_TIM_Base_Init+0x9e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d010      	beq.n	8002262 <HAL_TIM_Base_Init+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b20      	cmp	r3, #32
 8002246:	d00c      	beq.n	8002262 <HAL_TIM_Base_Init+0x9e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d008      	beq.n	8002262 <HAL_TIM_Base_Init+0x9e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d004      	beq.n	8002262 <HAL_TIM_Base_Init+0x9e>
 8002258:	f44f 718a 	mov.w	r1, #276	; 0x114
 800225c:	483b      	ldr	r0, [pc, #236]	; (800234c <HAL_TIM_Base_Init+0x188>)
 800225e:	f7fe f9de 	bl	800061e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <HAL_TIM_Base_Init+0xc4>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d009      	beq.n	8002288 <HAL_TIM_Base_Init+0xc4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d004      	beq.n	8002288 <HAL_TIM_Base_Init+0xc4>
 800227e:	f240 1115 	movw	r1, #277	; 0x115
 8002282:	4832      	ldr	r0, [pc, #200]	; (800234c <HAL_TIM_Base_Init+0x188>)
 8002284:	f7fe f9cb 	bl	800061e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_TIM_Base_Init+0xde>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_Base_Init+0xde>
 8002298:	f44f 718b 	mov.w	r1, #278	; 0x116
 800229c:	482b      	ldr	r0, [pc, #172]	; (800234c <HAL_TIM_Base_Init+0x188>)
 800229e:	f7fe f9be 	bl	800061e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f84a 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 fa0a 	bl	80026e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40000c00 	.word	0x40000c00
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800
 800234c:	08002c68 	.word	0x08002c68

08002350 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3d      	ldr	r2, [pc, #244]	; (8002468 <HAL_TIM_Base_Start_IT+0x104>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d027      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d022      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a39      	ldr	r2, [pc, #228]	; (800246c <HAL_TIM_Base_Start_IT+0x108>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01d      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_TIM_Base_Start_IT+0x10c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a36      	ldr	r2, [pc, #216]	; (8002474 <HAL_TIM_Base_Start_IT+0x110>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_TIM_Base_Start_IT+0x114>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a33      	ldr	r2, [pc, #204]	; (800247c <HAL_TIM_Base_Start_IT+0x118>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_TIM_Base_Start_IT+0x11c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_TIM_Base_Start_IT+0x62>
 80023bc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80023c0:	4830      	ldr	r0, [pc, #192]	; (8002484 <HAL_TIM_Base_Start_IT+0x120>)
 80023c2:	f7fe f92c 	bl	800061e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d001      	beq.n	80023d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e044      	b.n	8002460 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_TIM_Base_Start_IT+0x104>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <HAL_TIM_Base_Start_IT+0xc6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d013      	beq.n	800242a <HAL_TIM_Base_Start_IT+0xc6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_TIM_Base_Start_IT+0x108>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <HAL_TIM_Base_Start_IT+0xc6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_TIM_Base_Start_IT+0x10c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_TIM_Base_Start_IT+0xc6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_TIM_Base_Start_IT+0x110>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_TIM_Base_Start_IT+0xc6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_TIM_Base_Start_IT+0x114>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d111      	bne.n	800244e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d010      	beq.n	800245e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244c:	e007      	b.n	800245e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010000 	.word	0x40010000
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40014000 	.word	0x40014000
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800
 8002484:	08002c68 	.word	0x08002c68

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8ee 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8e0 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8f1 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8c4 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8b6 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8c7 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0208 	mvn.w	r2, #8
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f89a 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f88c 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f89d 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0210 	mvn.w	r2, #16
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2208      	movs	r2, #8
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f870 	bl	80026ac <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f862 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f873 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd fff2 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8e2 	bl	80027fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d10e      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d107      	bne.n	8002664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f838 	bl	80026d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d107      	bne.n	8002690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0220 	mvn.w	r2, #32
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8ac 	bl	80027e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a34      	ldr	r2, [pc, #208]	; (80027cc <TIM_Base_SetConfig+0xe4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00f      	beq.n	8002720 <TIM_Base_SetConfig+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002706:	d00b      	beq.n	8002720 <TIM_Base_SetConfig+0x38>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <TIM_Base_SetConfig+0xe8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_Base_SetConfig+0x38>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <TIM_Base_SetConfig+0xec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_Base_SetConfig+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <TIM_Base_SetConfig+0xf0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <TIM_Base_SetConfig+0xe4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01b      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d017      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <TIM_Base_SetConfig+0xe8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <TIM_Base_SetConfig+0xec>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <TIM_Base_SetConfig+0xf0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <TIM_Base_SetConfig+0xf4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <TIM_Base_SetConfig+0xf8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <TIM_Base_SetConfig+0xfc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <TIM_Base_SetConfig+0xe4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40014000 	.word	0x40014000
 80027e0:	40014400 	.word	0x40014400
 80027e4:	40014800 	.word	0x40014800

080027e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_ZdlPvj>:
 8002810:	f000 b81a 	b.w	8002848 <_ZdlPv>

08002814 <_Znwj>:
 8002814:	2801      	cmp	r0, #1
 8002816:	bf38      	it	cc
 8002818:	2001      	movcc	r0, #1
 800281a:	b510      	push	{r4, lr}
 800281c:	4604      	mov	r4, r0
 800281e:	4620      	mov	r0, r4
 8002820:	f000 f824 	bl	800286c <malloc>
 8002824:	b100      	cbz	r0, 8002828 <_Znwj+0x14>
 8002826:	bd10      	pop	{r4, pc}
 8002828:	f000 f810 	bl	800284c <_ZSt15get_new_handlerv>
 800282c:	b908      	cbnz	r0, 8002832 <_Znwj+0x1e>
 800282e:	f000 f815 	bl	800285c <abort>
 8002832:	4780      	blx	r0
 8002834:	e7f3      	b.n	800281e <_Znwj+0xa>

08002836 <_ZSt17__throw_bad_allocv>:
 8002836:	b508      	push	{r3, lr}
 8002838:	f000 f810 	bl	800285c <abort>

0800283c <_ZSt28__throw_bad_array_new_lengthv>:
 800283c:	b508      	push	{r3, lr}
 800283e:	f000 f80d 	bl	800285c <abort>

08002842 <_ZSt20__throw_length_errorPKc>:
 8002842:	b508      	push	{r3, lr}
 8002844:	f000 f80a 	bl	800285c <abort>

08002848 <_ZdlPv>:
 8002848:	f000 b818 	b.w	800287c <free>

0800284c <_ZSt15get_new_handlerv>:
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <_ZSt15get_new_handlerv+0xc>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f3bf 8f5b 	dmb	ish
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200000c8 	.word	0x200000c8

0800285c <abort>:
 800285c:	b508      	push	{r3, lr}
 800285e:	2006      	movs	r0, #6
 8002860:	f000 f90a 	bl	8002a78 <raise>
 8002864:	2001      	movs	r0, #1
 8002866:	f7fe fd0f 	bl	8001288 <_exit>
	...

0800286c <malloc>:
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <malloc+0xc>)
 800286e:	4601      	mov	r1, r0
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	f000 b82b 	b.w	80028cc <_malloc_r>
 8002876:	bf00      	nop
 8002878:	20000058 	.word	0x20000058

0800287c <free>:
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <free+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f000 b951 	b.w	8002b28 <_free_r>
 8002886:	bf00      	nop
 8002888:	20000058 	.word	0x20000058

0800288c <sbrk_aligned>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4e0e      	ldr	r6, [pc, #56]	; (80028c8 <sbrk_aligned+0x3c>)
 8002890:	460c      	mov	r4, r1
 8002892:	6831      	ldr	r1, [r6, #0]
 8002894:	4605      	mov	r5, r0
 8002896:	b911      	cbnz	r1, 800289e <sbrk_aligned+0x12>
 8002898:	f000 f90a 	bl	8002ab0 <_sbrk_r>
 800289c:	6030      	str	r0, [r6, #0]
 800289e:	4621      	mov	r1, r4
 80028a0:	4628      	mov	r0, r5
 80028a2:	f000 f905 	bl	8002ab0 <_sbrk_r>
 80028a6:	1c43      	adds	r3, r0, #1
 80028a8:	d00a      	beq.n	80028c0 <sbrk_aligned+0x34>
 80028aa:	1cc4      	adds	r4, r0, #3
 80028ac:	f024 0403 	bic.w	r4, r4, #3
 80028b0:	42a0      	cmp	r0, r4
 80028b2:	d007      	beq.n	80028c4 <sbrk_aligned+0x38>
 80028b4:	1a21      	subs	r1, r4, r0
 80028b6:	4628      	mov	r0, r5
 80028b8:	f000 f8fa 	bl	8002ab0 <_sbrk_r>
 80028bc:	3001      	adds	r0, #1
 80028be:	d101      	bne.n	80028c4 <sbrk_aligned+0x38>
 80028c0:	f04f 34ff 	mov.w	r4, #4294967295
 80028c4:	4620      	mov	r0, r4
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	200000d0 	.word	0x200000d0

080028cc <_malloc_r>:
 80028cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d0:	1ccd      	adds	r5, r1, #3
 80028d2:	f025 0503 	bic.w	r5, r5, #3
 80028d6:	3508      	adds	r5, #8
 80028d8:	2d0c      	cmp	r5, #12
 80028da:	bf38      	it	cc
 80028dc:	250c      	movcc	r5, #12
 80028de:	2d00      	cmp	r5, #0
 80028e0:	4607      	mov	r7, r0
 80028e2:	db01      	blt.n	80028e8 <_malloc_r+0x1c>
 80028e4:	42a9      	cmp	r1, r5
 80028e6:	d905      	bls.n	80028f4 <_malloc_r+0x28>
 80028e8:	230c      	movs	r3, #12
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	2600      	movs	r6, #0
 80028ee:	4630      	mov	r0, r6
 80028f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029c8 <_malloc_r+0xfc>
 80028f8:	f000 f868 	bl	80029cc <__malloc_lock>
 80028fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002900:	461c      	mov	r4, r3
 8002902:	bb5c      	cbnz	r4, 800295c <_malloc_r+0x90>
 8002904:	4629      	mov	r1, r5
 8002906:	4638      	mov	r0, r7
 8002908:	f7ff ffc0 	bl	800288c <sbrk_aligned>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	4604      	mov	r4, r0
 8002910:	d155      	bne.n	80029be <_malloc_r+0xf2>
 8002912:	f8d8 4000 	ldr.w	r4, [r8]
 8002916:	4626      	mov	r6, r4
 8002918:	2e00      	cmp	r6, #0
 800291a:	d145      	bne.n	80029a8 <_malloc_r+0xdc>
 800291c:	2c00      	cmp	r4, #0
 800291e:	d048      	beq.n	80029b2 <_malloc_r+0xe6>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	4631      	mov	r1, r6
 8002924:	4638      	mov	r0, r7
 8002926:	eb04 0903 	add.w	r9, r4, r3
 800292a:	f000 f8c1 	bl	8002ab0 <_sbrk_r>
 800292e:	4581      	cmp	r9, r0
 8002930:	d13f      	bne.n	80029b2 <_malloc_r+0xe6>
 8002932:	6821      	ldr	r1, [r4, #0]
 8002934:	1a6d      	subs	r5, r5, r1
 8002936:	4629      	mov	r1, r5
 8002938:	4638      	mov	r0, r7
 800293a:	f7ff ffa7 	bl	800288c <sbrk_aligned>
 800293e:	3001      	adds	r0, #1
 8002940:	d037      	beq.n	80029b2 <_malloc_r+0xe6>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	442b      	add	r3, r5
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	f8d8 3000 	ldr.w	r3, [r8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d038      	beq.n	80029c2 <_malloc_r+0xf6>
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	42a2      	cmp	r2, r4
 8002954:	d12b      	bne.n	80029ae <_malloc_r+0xe2>
 8002956:	2200      	movs	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e00f      	b.n	800297c <_malloc_r+0xb0>
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	1b52      	subs	r2, r2, r5
 8002960:	d41f      	bmi.n	80029a2 <_malloc_r+0xd6>
 8002962:	2a0b      	cmp	r2, #11
 8002964:	d917      	bls.n	8002996 <_malloc_r+0xca>
 8002966:	1961      	adds	r1, r4, r5
 8002968:	42a3      	cmp	r3, r4
 800296a:	6025      	str	r5, [r4, #0]
 800296c:	bf18      	it	ne
 800296e:	6059      	strne	r1, [r3, #4]
 8002970:	6863      	ldr	r3, [r4, #4]
 8002972:	bf08      	it	eq
 8002974:	f8c8 1000 	streq.w	r1, [r8]
 8002978:	5162      	str	r2, [r4, r5]
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	4638      	mov	r0, r7
 800297e:	f104 060b 	add.w	r6, r4, #11
 8002982:	f000 f829 	bl	80029d8 <__malloc_unlock>
 8002986:	f026 0607 	bic.w	r6, r6, #7
 800298a:	1d23      	adds	r3, r4, #4
 800298c:	1af2      	subs	r2, r6, r3
 800298e:	d0ae      	beq.n	80028ee <_malloc_r+0x22>
 8002990:	1b9b      	subs	r3, r3, r6
 8002992:	50a3      	str	r3, [r4, r2]
 8002994:	e7ab      	b.n	80028ee <_malloc_r+0x22>
 8002996:	42a3      	cmp	r3, r4
 8002998:	6862      	ldr	r2, [r4, #4]
 800299a:	d1dd      	bne.n	8002958 <_malloc_r+0x8c>
 800299c:	f8c8 2000 	str.w	r2, [r8]
 80029a0:	e7ec      	b.n	800297c <_malloc_r+0xb0>
 80029a2:	4623      	mov	r3, r4
 80029a4:	6864      	ldr	r4, [r4, #4]
 80029a6:	e7ac      	b.n	8002902 <_malloc_r+0x36>
 80029a8:	4634      	mov	r4, r6
 80029aa:	6876      	ldr	r6, [r6, #4]
 80029ac:	e7b4      	b.n	8002918 <_malloc_r+0x4c>
 80029ae:	4613      	mov	r3, r2
 80029b0:	e7cc      	b.n	800294c <_malloc_r+0x80>
 80029b2:	230c      	movs	r3, #12
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4638      	mov	r0, r7
 80029b8:	f000 f80e 	bl	80029d8 <__malloc_unlock>
 80029bc:	e797      	b.n	80028ee <_malloc_r+0x22>
 80029be:	6025      	str	r5, [r4, #0]
 80029c0:	e7dc      	b.n	800297c <_malloc_r+0xb0>
 80029c2:	605b      	str	r3, [r3, #4]
 80029c4:	deff      	udf	#255	; 0xff
 80029c6:	bf00      	nop
 80029c8:	200000cc 	.word	0x200000cc

080029cc <__malloc_lock>:
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <__malloc_lock+0x8>)
 80029ce:	f000 b8a9 	b.w	8002b24 <__retarget_lock_acquire_recursive>
 80029d2:	bf00      	nop
 80029d4:	20000210 	.word	0x20000210

080029d8 <__malloc_unlock>:
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <__malloc_unlock+0x8>)
 80029da:	f000 b8a4 	b.w	8002b26 <__retarget_lock_release_recursive>
 80029de:	bf00      	nop
 80029e0:	20000210 	.word	0x20000210

080029e4 <memmove>:
 80029e4:	4288      	cmp	r0, r1
 80029e6:	b510      	push	{r4, lr}
 80029e8:	eb01 0402 	add.w	r4, r1, r2
 80029ec:	d902      	bls.n	80029f4 <memmove+0x10>
 80029ee:	4284      	cmp	r4, r0
 80029f0:	4623      	mov	r3, r4
 80029f2:	d807      	bhi.n	8002a04 <memmove+0x20>
 80029f4:	1e43      	subs	r3, r0, #1
 80029f6:	42a1      	cmp	r1, r4
 80029f8:	d008      	beq.n	8002a0c <memmove+0x28>
 80029fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a02:	e7f8      	b.n	80029f6 <memmove+0x12>
 8002a04:	4402      	add	r2, r0
 8002a06:	4601      	mov	r1, r0
 8002a08:	428a      	cmp	r2, r1
 8002a0a:	d100      	bne.n	8002a0e <memmove+0x2a>
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a16:	e7f7      	b.n	8002a08 <memmove+0x24>

08002a18 <memset>:
 8002a18:	4402      	add	r2, r0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <memset+0xa>
 8002a20:	4770      	bx	lr
 8002a22:	f803 1b01 	strb.w	r1, [r3], #1
 8002a26:	e7f9      	b.n	8002a1c <memset+0x4>

08002a28 <_raise_r>:
 8002a28:	291f      	cmp	r1, #31
 8002a2a:	b538      	push	{r3, r4, r5, lr}
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	d904      	bls.n	8002a3c <_raise_r+0x14>
 8002a32:	2316      	movs	r3, #22
 8002a34:	6003      	str	r3, [r0, #0]
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a3e:	b112      	cbz	r2, 8002a46 <_raise_r+0x1e>
 8002a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a44:	b94b      	cbnz	r3, 8002a5a <_raise_r+0x32>
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 f830 	bl	8002aac <_getpid_r>
 8002a4c:	462a      	mov	r2, r5
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4620      	mov	r0, r4
 8002a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a56:	f000 b817 	b.w	8002a88 <_kill_r>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00a      	beq.n	8002a74 <_raise_r+0x4c>
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	d103      	bne.n	8002a6a <_raise_r+0x42>
 8002a62:	2316      	movs	r3, #22
 8002a64:	6003      	str	r3, [r0, #0]
 8002a66:	2001      	movs	r0, #1
 8002a68:	e7e7      	b.n	8002a3a <_raise_r+0x12>
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a70:	4628      	mov	r0, r5
 8002a72:	4798      	blx	r3
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7e0      	b.n	8002a3a <_raise_r+0x12>

08002a78 <raise>:
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <raise+0xc>)
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f7ff bfd3 	b.w	8002a28 <_raise_r>
 8002a82:	bf00      	nop
 8002a84:	20000058 	.word	0x20000058

08002a88 <_kill_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4d07      	ldr	r5, [pc, #28]	; (8002aa8 <_kill_r+0x20>)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	602b      	str	r3, [r5, #0]
 8002a96:	f7fe fbe7 	bl	8001268 <_kill>
 8002a9a:	1c43      	adds	r3, r0, #1
 8002a9c:	d102      	bne.n	8002aa4 <_kill_r+0x1c>
 8002a9e:	682b      	ldr	r3, [r5, #0]
 8002aa0:	b103      	cbz	r3, 8002aa4 <_kill_r+0x1c>
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000020c 	.word	0x2000020c

08002aac <_getpid_r>:
 8002aac:	f7fe bbd4 	b.w	8001258 <_getpid>

08002ab0 <_sbrk_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4d06      	ldr	r5, [pc, #24]	; (8002acc <_sbrk_r+0x1c>)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	4604      	mov	r4, r0
 8002ab8:	4608      	mov	r0, r1
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	f7fe fbee 	bl	800129c <_sbrk>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d102      	bne.n	8002aca <_sbrk_r+0x1a>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	b103      	cbz	r3, 8002aca <_sbrk_r+0x1a>
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	bd38      	pop	{r3, r4, r5, pc}
 8002acc:	2000020c 	.word	0x2000020c

08002ad0 <__errno>:
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <__errno+0x8>)
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000058 	.word	0x20000058

08002adc <__libc_init_array>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	4d0d      	ldr	r5, [pc, #52]	; (8002b14 <__libc_init_array+0x38>)
 8002ae0:	4c0d      	ldr	r4, [pc, #52]	; (8002b18 <__libc_init_array+0x3c>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	42a6      	cmp	r6, r4
 8002aea:	d109      	bne.n	8002b00 <__libc_init_array+0x24>
 8002aec:	4d0b      	ldr	r5, [pc, #44]	; (8002b1c <__libc_init_array+0x40>)
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__libc_init_array+0x44>)
 8002af0:	f000 f866 	bl	8002bc0 <_init>
 8002af4:	1b64      	subs	r4, r4, r5
 8002af6:	10a4      	asrs	r4, r4, #2
 8002af8:	2600      	movs	r6, #0
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d105      	bne.n	8002b0a <__libc_init_array+0x2e>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b04:	4798      	blx	r3
 8002b06:	3601      	adds	r6, #1
 8002b08:	e7ee      	b.n	8002ae8 <__libc_init_array+0xc>
 8002b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0e:	4798      	blx	r3
 8002b10:	3601      	adds	r6, #1
 8002b12:	e7f2      	b.n	8002afa <__libc_init_array+0x1e>
 8002b14:	08002cc0 	.word	0x08002cc0
 8002b18:	08002cc0 	.word	0x08002cc0
 8002b1c:	08002cc0 	.word	0x08002cc0
 8002b20:	08002cc4 	.word	0x08002cc4

08002b24 <__retarget_lock_acquire_recursive>:
 8002b24:	4770      	bx	lr

08002b26 <__retarget_lock_release_recursive>:
 8002b26:	4770      	bx	lr

08002b28 <_free_r>:
 8002b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d044      	beq.n	8002bb8 <_free_r+0x90>
 8002b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b32:	9001      	str	r0, [sp, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f1a1 0404 	sub.w	r4, r1, #4
 8002b3a:	bfb8      	it	lt
 8002b3c:	18e4      	addlt	r4, r4, r3
 8002b3e:	f7ff ff45 	bl	80029cc <__malloc_lock>
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <_free_r+0x94>)
 8002b44:	9801      	ldr	r0, [sp, #4]
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	b933      	cbnz	r3, 8002b58 <_free_r+0x30>
 8002b4a:	6063      	str	r3, [r4, #4]
 8002b4c:	6014      	str	r4, [r2, #0]
 8002b4e:	b003      	add	sp, #12
 8002b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b54:	f7ff bf40 	b.w	80029d8 <__malloc_unlock>
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	d908      	bls.n	8002b6e <_free_r+0x46>
 8002b5c:	6825      	ldr	r5, [r4, #0]
 8002b5e:	1961      	adds	r1, r4, r5
 8002b60:	428b      	cmp	r3, r1
 8002b62:	bf01      	itttt	eq
 8002b64:	6819      	ldreq	r1, [r3, #0]
 8002b66:	685b      	ldreq	r3, [r3, #4]
 8002b68:	1949      	addeq	r1, r1, r5
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	e7ed      	b.n	8002b4a <_free_r+0x22>
 8002b6e:	461a      	mov	r2, r3
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b10b      	cbz	r3, 8002b78 <_free_r+0x50>
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	d9fa      	bls.n	8002b6e <_free_r+0x46>
 8002b78:	6811      	ldr	r1, [r2, #0]
 8002b7a:	1855      	adds	r5, r2, r1
 8002b7c:	42a5      	cmp	r5, r4
 8002b7e:	d10b      	bne.n	8002b98 <_free_r+0x70>
 8002b80:	6824      	ldr	r4, [r4, #0]
 8002b82:	4421      	add	r1, r4
 8002b84:	1854      	adds	r4, r2, r1
 8002b86:	42a3      	cmp	r3, r4
 8002b88:	6011      	str	r1, [r2, #0]
 8002b8a:	d1e0      	bne.n	8002b4e <_free_r+0x26>
 8002b8c:	681c      	ldr	r4, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	440c      	add	r4, r1
 8002b94:	6014      	str	r4, [r2, #0]
 8002b96:	e7da      	b.n	8002b4e <_free_r+0x26>
 8002b98:	d902      	bls.n	8002ba0 <_free_r+0x78>
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	6003      	str	r3, [r0, #0]
 8002b9e:	e7d6      	b.n	8002b4e <_free_r+0x26>
 8002ba0:	6825      	ldr	r5, [r4, #0]
 8002ba2:	1961      	adds	r1, r4, r5
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	bf04      	itt	eq
 8002ba8:	6819      	ldreq	r1, [r3, #0]
 8002baa:	685b      	ldreq	r3, [r3, #4]
 8002bac:	6063      	str	r3, [r4, #4]
 8002bae:	bf04      	itt	eq
 8002bb0:	1949      	addeq	r1, r1, r5
 8002bb2:	6021      	streq	r1, [r4, #0]
 8002bb4:	6054      	str	r4, [r2, #4]
 8002bb6:	e7ca      	b.n	8002b4e <_free_r+0x26>
 8002bb8:	b003      	add	sp, #12
 8002bba:	bd30      	pop	{r4, r5, pc}
 8002bbc:	200000cc 	.word	0x200000cc

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
